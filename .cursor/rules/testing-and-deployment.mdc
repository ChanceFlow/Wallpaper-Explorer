---
description:
globs:
alwaysApply: false
---
# 测试和部署指南

## 测试策略

### 单元测试
```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_function_name() -> Result<(), Box<dyn std::error::Error>> {
        // 测试代码
        Ok(())
    }
}
```

### 集成测试
- **位置**: `tests/` 目录
- **命名**: 以 `integration_` 开头
- **覆盖**: 测试与 Wallpaper Engine 的集成

### WSL 特定测试
- **路径转换测试**: 验证 Windows 路径到 WSL 路径的转换
- **文件权限测试**: 确保在 WSL 环境中正确处理文件权限
- **跨平台兼容性测试**: 测试代码在不同环境下的行为

## 构建和运行

### 开发环境
```bash
# 构建项目
cargo build

# 运行项目
cargo run

# 运行测试
cargo test

# 运行特定测试
cargo test test_name

# 生成文档
cargo doc --open
```

### 发布构建
```bash
# 优化构建
cargo build --release

# 生成发布版本
cargo build --release --target x86_64-pc-windows-gnu
```

## WSL 部署注意事项

### 权限处理
- 确保可执行文件具有正确的权限
- 处理 Windows 和 Linux 文件系统之间的权限差异

### 路径映射
- 正确处理 `/mnt/` 前缀的路径
- 验证对 Steam 目录的访问权限

### 环境变量
```bash
# 设置 RUST_LOG 环境变量用于日志
export RUST_LOG=debug

# 设置 Steam 路径环境变量
export STEAM_PATH="/mnt/c/Program Files (x86)/Steam"
```

## 性能优化
- **编译优化**: 使用 `--release` 标志
- **依赖优化**: 只引入必要的 feature
- **内存管理**: 适当使用引用和所有权
- **异步处理**: 对 I/O 密集型操作使用异步编程

## 调试工具
- **GDB**: 在 WSL 中调试 Rust 程序
- **Valgrind**: 内存泄漏检测（如果可用）
- **Rust 内置工具**: `cargo check`, `cargo clippy`, `cargo fmt`
